#! /usr/bin/env bash


# manuel-contrib-watch
# act on changes to files


# Usage: manuel_watch [directory] [actions]
# where actions is an associative array.
#
# Example:
#
# function do_something {
#   declare -A actions=(
#     ["\.js$"]="echo 'we should concat and minify the js again'"
#     ["\.go$"]="go build ."
#   )
#
#   manuel_watch . actions
# }

function _get_md5_command {
  if [[ ! -z $(command -v md5) ]]; then
    echo $(which md5)
  elif [[ ! -z $(command -v md5sum) ]]; then
    echo $(which md5sum)
  else
    echo -e ">> Error: neither md5 nor md5sum found on PATH" 1>&2
    exit 1
  fi
}


function manuel_watch {
  target_dir=`readlink -f $1` # a directory to watch for changes in
  actions=$2          # associative array of regex=>command

  # keep track of the last thing to happen so we
  # can skip processing if a CREATE is followed by an ATTRIB, etc
  last_directory=""
  last_target=""
  last_action=""

  echo -e ">> Watching $target_directory"

  # set up watches
  inotifywait -mrq $target_dir \
    --event=CREATE,MOVE,DELETE,ATTRIB | while read LINE
  do
    IFS=' ' read -a event <<< "$LINE"

    directory=${event[0]}
    action=${event[1]}
    target=${event[2]}

    # TODO: this should also handle move_to and move_from
    if ! ( [[ $target == $last_target ]] && \
           [[ $action == "ATTRIB" ]] && \
           [[ $last_action == "CREATE" ]] )
    then
      # check if the event target matches any patterns in actions map
      for k in ${!actions[@]}
      do
        v=${actions[$k]}
        # test the key is a regex match against the target file
        if [[ $target =~ $k ]]; then
          echo -e "\n>> Change event $action detected for $target ..."
          eval $v
        fi
      done
    fi
    last_directory=$directory
    last_target=$target
    last_action=$action
  done
}
